{"ast":null,"code":"var _jsxFileName = \"C:\\\\Neda\\\\Bootcamp\\\\Challenges\\\\Plenty\\\\client\\\\src\\\\components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; //import { ComboBox } from \"@progress/kendo-react-dropdowns\";\n\nimport { MultiSelect } from \"@progress/kendo-react-dropdowns\";\nimport { useState } from \"react\";\nimport '@progress/kendo-theme-default/dist/all.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Form() {\n  _s();\n\n  //added here\n  useEffect(() => {\n    // api to call ingredients\n    fetch('https://www.themealdb.com/api/json/v1/1/list.php?i=list').then(response => response.json()).then(norm => {\n      const ingredientsName = norm.meals.map(ing => ing.strIngredient);\n      setIngredients(ingredientsName);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []); // DO NOT DELETE THE EMPTY ARRAY!!!! LEAVE IT THERE!!!!!!!!!!\n\n  const [ingredients, setIngredients] = useState([]);\n  const [selectedIngredients, setSelectedIngredients] = useState([]);\n\n  const onIngredientChange = event => setSelectedIngredients([...event.value]);\n\n  const [selectedAssignee, setSelectedAssignee] = useState(null);\n\n  const onChange = event => setSelectedAssignee(event.value);\n\n  const [meals, setMeals] = useState([]); // on submit function/ take selected ingredients and send it to our other api, then render results.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"k-label k-mb-3\",\n          children: \"Choose your ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n          data: ingredients,\n          value: selectedIngredients,\n          onChange: onIngredientChange,\n          autoClose: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/results\",\n          type: \"button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"SX6rxL2DNcWtd7lcHNfslmjCtMg=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Neda/Bootcamp/Challenges/Plenty/client/src/components/Form.js"],"names":["React","useEffect","MultiSelect","useState","Form","fetch","then","response","json","norm","ingredientsName","meals","map","ing","strIngredient","setIngredients","catch","error","console","log","ingredients","selectedIngredients","setSelectedIngredients","onIngredientChange","event","value","selectedAssignee","setSelectedAssignee","onChange","setMeals","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,4CAAP;;;AACA,SAASC,IAAT,GAAgB;AAAA;;AACd;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,KAAK,CAAC,yDAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAMC,eAAe,GAAGD,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACC,aAA1B,CAAxB;AACAC,MAAAA,cAAc,CAACL,eAAD,CAAd;AACD,KALD,EAMCM,KAND,CAMOC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KARD;AASD,GAXQ,EAWN,EAXM,CAAT,CAHc,CAcP;;AACP,QAAM,CAACG,WAAD,EAAcL,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkB,mBAAD,EAAsBC,sBAAtB,IAAgDnB,QAAQ,CAAC,EAAD,CAA9D;;AACA,QAAMoB,kBAAkB,GAAGC,KAAK,IAAIF,sBAAsB,CAAC,CAAC,GAAGE,KAAK,CAACC,KAAV,CAAD,CAA1D;;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CxB,QAAQ,CAAC,IAAD,CAAxD;;AACA,QAAMyB,QAAQ,GAAGJ,KAAK,IAAIG,mBAAmB,CAACH,KAAK,CAACC,KAAP,CAA7C;;AACA,QAAM,CAACd,KAAD,EAAQkB,QAAR,IAAoB1B,QAAQ,CAAC,EAAD,CAAlC,CApBc,CAqBd;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGF;AAAM,QAAA,QAAQ,EAAE2B,CAAC,IAAIA,CAAC,CAACC,cAAF,EAArB;AAAA,gCACE;AAAO,UAAA,SAAS,EAAC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEX,WAAnB;AAAgC,UAAA,KAAK,EAAEC,mBAAvC;AAA4D,UAAA,QAAQ,EAAEE,kBAAtE;AAA0F,UAAA,SAAS,EAAI;AAAvG;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGC;AAAG,UAAA,IAAI,EAAC,UAAR;AAAmB,UAAA,IAAI,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cAHE;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GApCQnB,I;;KAAAA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n//import { ComboBox } from \"@progress/kendo-react-dropdowns\";\r\nimport { MultiSelect } from \"@progress/kendo-react-dropdowns\";\r\nimport { useState } from \"react\";\r\nimport '@progress/kendo-theme-default/dist/all.css';\r\nfunction Form() {\r\n  //added here\r\n  \r\n  useEffect(() => {\r\n    // api to call ingredients\r\n    fetch('https://www.themealdb.com/api/json/v1/1/list.php?i=list')\r\n    .then(response => response.json())\r\n    .then(norm => {\r\n      const ingredientsName = norm.meals.map(ing => ing.strIngredient)\r\n      setIngredients(ingredientsName)\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }, []) // DO NOT DELETE THE EMPTY ARRAY!!!! LEAVE IT THERE!!!!!!!!!!\r\n  const [ingredients, setIngredients] = useState([])\r\n  const [selectedIngredients, setSelectedIngredients] = useState([])\r\n  const onIngredientChange = event => setSelectedIngredients([...event.value])\r\n  const [selectedAssignee, setSelectedAssignee] = useState(null);\r\n  const onChange = event => setSelectedAssignee(event.value);\r\n  const [meals, setMeals] = useState([])\r\n  // on submit function/ take selected ingredients and send it to our other api, then render results.\r\n  return (\r\n    <div className=\"form\">\r\n      <div className=\"container\">\r\n        <h1>Form</h1>\r\n        {/* HERE IS THE CALL BACK FROM THE SELECTED LIST AND RECIPE RESULTS */}\r\n    <form onSubmit={e => e.preventDefault()}>\r\n      <label className=\"k-label k-mb-3\">Choose your ingredients</label>\r\n      <MultiSelect data={ingredients} value={selectedIngredients} onChange={onIngredientChange} autoClose = {false}></MultiSelect>\r\n     <a href=\"/results\" type=\"button\">Submit</a>\r\n      \r\n    </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}